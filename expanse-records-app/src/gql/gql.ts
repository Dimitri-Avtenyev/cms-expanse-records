/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\nquery GetAllYearPosts {\n  posts(sort: \"publishedAt:DESC\") {\n    data {\n      id\n      attributes {\n        author {\n          data {\n            id\n            attributes {\n              firstname\n              lastname\n              email\n              shortbio\n              image {\n                data {\n                  attributes{\n                    url\n                    name\n                    formats\n                  }\n                }\n              }\n            }\n          }\n        }\n        title\n        content\n        publishedAt\n        image {\n          data {\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetAllYearPostsDocument,
    "\n\nquery GetPost($id: ID) {\n  post(id: $id) {\n    data {\n      id\n      attributes {\n        author {\n          data {\n            id\n            attributes {\n              firstname\n              lastname\n              email\n              shortbio\n              image {\n                data {\n                  attributes {\n                    url\n                    name\n                    formats\n                  }\n                }\n              }\n            }\n          }\n        }\n        title\n        content\n        publishedAt\n        image {\n          data {\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetPostDocument,
    "\nquery GetAllPostsYear {\n  posts(sort: \"publishedAt:DESC\") {\n    data {\n      id\n      attributes {\n        publishedAt\n       \n      }\n    }\n  }\n}": types.GetAllPostsYearDocument,
    "\nquery GetPosts($limit: Int) {\n  posts(sort: \"publishedAt:DESC\", pagination: { limit: $limit }) {\n    data {\n      id\n      attributes {\n        author {\n          data {\n            id\n            attributes {\n              firstname\n              lastname\n              email\n              shortbio\n              image {\n                data {\n                  attributes {\n                    url\n                    name\n                    formats\n                  }\n                }\n              }\n            }\n          }\n        }\n        title\n        content\n        publishedAt\n        image {\n          data {\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetPostsDocument,
    "\nquery GetEpisodeForSeasonWithEpisodeNum($id: ID, $episodeNum: Int) {\n  season(id: $id) {\n    data {\n      attributes {\n        episodes(filters: { episodeNum: { eq: $episodeNum } }) {\n          data {\n            attributes {\n              title\n              air_date\n              synopsis\n              episodeNum\n              episodeId\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\n": types.GetEpisodeForSeasonWithEpisodeNumDocument,
    "\nquery GetSeasonsWithEpisodes  {\n  seasons(sort:\"id\") {\n    data {\n      id\n      attributes {\n        episodes {\n          data {\n            attributes {\n              title\n              air_date\n              synopsis\n              episodeNum\n              episodeId\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetSeasonsWithEpisodesDocument,
    "\nquery GetAllSeasonIds {\n  seasons (sort:\"id\"){data{id}} \n}\n\n": types.GetAllSeasonIdsDocument,
    "\nquery GetEpisodesForSeasonID($id: ID) {\n  season(id: $id) {\n    data {\n      attributes {\n        episodes {\n          data {\n            attributes {\n              title\n              air_date\n              synopsis\n              episodeNum\n              episodeId\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n": types.GetEpisodesForSeasonIdDocument,
    "\nquery GetAllCharacterIds {\n  characters {\n    data {\n      id\n    }\n  }\n}\n": types.GetAllCharacterIdsDocument,
    "\nquery GetCharacter($id: ID) {\n  character(id: $id) {\n    data {\n      id\n      attributes {\n        name\n        bio\n        image {\n          data {\n            attributes {\n              url\n              name\n              formats\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetCharacterDocument,
    "\nquery GetAllCharacters {\n  characters {\n    data {\n      id\n      attributes {\n        name\n        bio\n        image {\n          data {\n            attributes {\n              url\n              name\n              formats\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetAllCharactersDocument,
    "\nquery GetAllSeasons {\n  seasons(sort:\"id\") {\n    data {\n      attributes {\n        title\n        createdAt\n        updatedAt\n        publishedAt\n        synopsis\n        metacriticRating\n        image {\n          data {\n            id\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  episodes {\n    data {\n      id\n      attributes {\n        title\n        air_date\n        synopsis\n        createdAt\n        updatedAt\n        publishedAt\n        episodeNum\n        episodeId\n      }\n    }\n  }\n}\n\n": types.GetAllSeasonsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetAllYearPosts {\n  posts(sort: \"publishedAt:DESC\") {\n    data {\n      id\n      attributes {\n        author {\n          data {\n            id\n            attributes {\n              firstname\n              lastname\n              email\n              shortbio\n              image {\n                data {\n                  attributes{\n                    url\n                    name\n                    formats\n                  }\n                }\n              }\n            }\n          }\n        }\n        title\n        content\n        publishedAt\n        image {\n          data {\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetAllYearPosts {\n  posts(sort: \"publishedAt:DESC\") {\n    data {\n      id\n      attributes {\n        author {\n          data {\n            id\n            attributes {\n              firstname\n              lastname\n              email\n              shortbio\n              image {\n                data {\n                  attributes{\n                    url\n                    name\n                    formats\n                  }\n                }\n              }\n            }\n          }\n        }\n        title\n        content\n        publishedAt\n        image {\n          data {\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\nquery GetPost($id: ID) {\n  post(id: $id) {\n    data {\n      id\n      attributes {\n        author {\n          data {\n            id\n            attributes {\n              firstname\n              lastname\n              email\n              shortbio\n              image {\n                data {\n                  attributes {\n                    url\n                    name\n                    formats\n                  }\n                }\n              }\n            }\n          }\n        }\n        title\n        content\n        publishedAt\n        image {\n          data {\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\n\nquery GetPost($id: ID) {\n  post(id: $id) {\n    data {\n      id\n      attributes {\n        author {\n          data {\n            id\n            attributes {\n              firstname\n              lastname\n              email\n              shortbio\n              image {\n                data {\n                  attributes {\n                    url\n                    name\n                    formats\n                  }\n                }\n              }\n            }\n          }\n        }\n        title\n        content\n        publishedAt\n        image {\n          data {\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetAllPostsYear {\n  posts(sort: \"publishedAt:DESC\") {\n    data {\n      id\n      attributes {\n        publishedAt\n       \n      }\n    }\n  }\n}"): (typeof documents)["\nquery GetAllPostsYear {\n  posts(sort: \"publishedAt:DESC\") {\n    data {\n      id\n      attributes {\n        publishedAt\n       \n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetPosts($limit: Int) {\n  posts(sort: \"publishedAt:DESC\", pagination: { limit: $limit }) {\n    data {\n      id\n      attributes {\n        author {\n          data {\n            id\n            attributes {\n              firstname\n              lastname\n              email\n              shortbio\n              image {\n                data {\n                  attributes {\n                    url\n                    name\n                    formats\n                  }\n                }\n              }\n            }\n          }\n        }\n        title\n        content\n        publishedAt\n        image {\n          data {\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetPosts($limit: Int) {\n  posts(sort: \"publishedAt:DESC\", pagination: { limit: $limit }) {\n    data {\n      id\n      attributes {\n        author {\n          data {\n            id\n            attributes {\n              firstname\n              lastname\n              email\n              shortbio\n              image {\n                data {\n                  attributes {\n                    url\n                    name\n                    formats\n                  }\n                }\n              }\n            }\n          }\n        }\n        title\n        content\n        publishedAt\n        image {\n          data {\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetEpisodeForSeasonWithEpisodeNum($id: ID, $episodeNum: Int) {\n  season(id: $id) {\n    data {\n      attributes {\n        episodes(filters: { episodeNum: { eq: $episodeNum } }) {\n          data {\n            attributes {\n              title\n              air_date\n              synopsis\n              episodeNum\n              episodeId\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\n"): (typeof documents)["\nquery GetEpisodeForSeasonWithEpisodeNum($id: ID, $episodeNum: Int) {\n  season(id: $id) {\n    data {\n      attributes {\n        episodes(filters: { episodeNum: { eq: $episodeNum } }) {\n          data {\n            attributes {\n              title\n              air_date\n              synopsis\n              episodeNum\n              episodeId\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetSeasonsWithEpisodes  {\n  seasons(sort:\"id\") {\n    data {\n      id\n      attributes {\n        episodes {\n          data {\n            attributes {\n              title\n              air_date\n              synopsis\n              episodeNum\n              episodeId\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetSeasonsWithEpisodes  {\n  seasons(sort:\"id\") {\n    data {\n      id\n      attributes {\n        episodes {\n          data {\n            attributes {\n              title\n              air_date\n              synopsis\n              episodeNum\n              episodeId\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetAllSeasonIds {\n  seasons (sort:\"id\"){data{id}} \n}\n\n"): (typeof documents)["\nquery GetAllSeasonIds {\n  seasons (sort:\"id\"){data{id}} \n}\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetEpisodesForSeasonID($id: ID) {\n  season(id: $id) {\n    data {\n      attributes {\n        episodes {\n          data {\n            attributes {\n              title\n              air_date\n              synopsis\n              episodeNum\n              episodeId\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n"): (typeof documents)["\nquery GetEpisodesForSeasonID($id: ID) {\n  season(id: $id) {\n    data {\n      attributes {\n        episodes {\n          data {\n            attributes {\n              title\n              air_date\n              synopsis\n              episodeNum\n              episodeId\n              image {\n                data {\n                  id\n                  attributes {\n                    url\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetAllCharacterIds {\n  characters {\n    data {\n      id\n    }\n  }\n}\n"): (typeof documents)["\nquery GetAllCharacterIds {\n  characters {\n    data {\n      id\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetCharacter($id: ID) {\n  character(id: $id) {\n    data {\n      id\n      attributes {\n        name\n        bio\n        image {\n          data {\n            attributes {\n              url\n              name\n              formats\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetCharacter($id: ID) {\n  character(id: $id) {\n    data {\n      id\n      attributes {\n        name\n        bio\n        image {\n          data {\n            attributes {\n              url\n              name\n              formats\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetAllCharacters {\n  characters {\n    data {\n      id\n      attributes {\n        name\n        bio\n        image {\n          data {\n            attributes {\n              url\n              name\n              formats\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetAllCharacters {\n  characters {\n    data {\n      id\n      attributes {\n        name\n        bio\n        image {\n          data {\n            attributes {\n              url\n              name\n              formats\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetAllSeasons {\n  seasons(sort:\"id\") {\n    data {\n      attributes {\n        title\n        createdAt\n        updatedAt\n        publishedAt\n        synopsis\n        metacriticRating\n        image {\n          data {\n            id\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  episodes {\n    data {\n      id\n      attributes {\n        title\n        air_date\n        synopsis\n        createdAt\n        updatedAt\n        publishedAt\n        episodeNum\n        episodeId\n      }\n    }\n  }\n}\n\n"): (typeof documents)["\nquery GetAllSeasons {\n  seasons(sort:\"id\") {\n    data {\n      attributes {\n        title\n        createdAt\n        updatedAt\n        publishedAt\n        synopsis\n        metacriticRating\n        image {\n          data {\n            id\n            attributes {\n              url\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  episodes {\n    data {\n      id\n      attributes {\n        title\n        air_date\n        synopsis\n        createdAt\n        updatedAt\n        publishedAt\n        episodeNum\n        episodeId\n      }\n    }\n  }\n}\n\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;